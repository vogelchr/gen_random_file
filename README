gen_random_file - Generate a file with random content.

For testing storage systems, I need a quick way to generate files
with random content in it. Linux' /dev/urandom is slow, so I wrote
this small wrapper around fastrand.h from Ivan Dimkovic
(included as fastrand.h).

NOTE: This program will most likely only work on a 64bit x86-64 PC
capable of using the SSE4 extensions, because that's what fastrand.h is using.

Christian Vogel <vogelchr@vogel.cx>, 2014

***********************
** The documentation **  (it's not much, but it's all we've got!)
***********************

	Usage: gen_random_file [options] size[kMG] filename
	  Create a file with random content of specific size.Options:
	  -h     : this help
	  -v     : be verbose
	  -f     : force overwrite
	  -s     : compute and print sha1

Motivation
----------

To generate files with random content, it's easy to just
copy a few megabytes out of the kernel's random generator. Unfortunately
the kernel tries hard to make high-quality random numbers usable for
cryptographic purposes, which makes this generator pretty slow:

On my Intel(R) Pentium(R) Dual  CPU  E2180  @ 2.00GHz, /dev/urandom can
only supply about 10MB of data / second, a dd for 256MB takes 27s.

	$ time dd if=/dev/urandom of=./foo_256M bs=$(( 1024 * 1024 )) count=256
	268435456 bytes (268 MB) copied, 27.6421 s, 9.7 MB/s
	real    0m27.645s

On the same machine, this program only needs 0,625s to do the same, and
2,4s if one includes calculation of the sha1 checksum.

	$ time ./gen_random_file -f 256M foo_256M_2
	real    0m0.624s

	$ time ./gen_random_file -sf 256M foo_256M_2
	730fb5e509827a769751e8cfef8f94e857ac2bf2
	real    0m2.389s

Examples
--------

To create a file "foo.dat" (for testing your storage system, for example), with
a size of 128kBytes, run the following command:

	gen_random_file 128k foo.dat

If the file already exists (for example, because you are using a unique
filename generated by mktemp), and you want to overwrite, specify -f:

	$ filename=`mktemp ./quux.XXXXXX`		# might create ./quux.WFHWFq
	$ gen_random_file -f 128k $filename

If you want to calculate the SHA1 checksum, to be able to detect filesystem
corruption later on, this tool can generate the checksum for you on the fly:

	$ gen_random_file  -s 1M ./testfile.dat
	15f1debf3b6929fb548f28b319d5338185dacd56
	$ shasum testfile.dat
	15f1debf3b6929fb548f28b319d5338185dacd56  testfile.dat

